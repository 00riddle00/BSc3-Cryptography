def iter(M,k,f):
    r=M[1]
    l=M[0]^^eval(f)
    return [r,l]

def feistel(M, K, f):

    res = []

    for m in M:
        for k in K:
            m=iter(m,k,f)
        res.append(m[::-1])

    return res

def de_feistel(M, K, f):
    return feistel(M, K[::-1], f)

def ord_to_str(M):
    return ''.join([chr(item) for sublist in M for item in sublist])

def xor(a_block, b_block):
    return [ a_block[0] ^^ b_block[0], a_block[1] ^^ b_block[1] ]

# UZD1
C1 = [[29, 70], [18, 82], [22, 84], [0, 72], [18, 84], [0, 68], [11, 94], [22, 84], [8, 65], [10, 94], [26, 66], [16, 81], [14, 73], [13, 80], [23, 82], [2, 72], [12, 76], [22, 83], [12, 79], [28, 95], [12, 72], [12, 79], [22, 93], [12, 73], [31, 68], [10, 94], [3, 94], [12, 76], [6, 74], [20, 86], [12, 76], [8, 66], [0, 72], [14, 66], [4, 68], [12, 76], [8, 66], [11, 94], [0, 72], [0, 75], [8, 78], [9, 92], [24, 83], [24, 86], [24, 87], [11, 80], [3, 86], [8, 76], [14, 78], [31, 78], [7, 66], [2, 72], [0, 68], [19, 87], [12, 84], [0, 75], [12, 84], [6, 64], [28, 86], [0, 75], [28, 86], [6, 73], [8, 78], [9, 92], [16, 83], [16, 86], [4, 64], [30, 84], [12, 84], [16, 86], [22, 82], [28, 86], [24, 86], [21, 80], [10, 82], [25, 70], [7, 78], [12, 81], [0, 73], [22, 82], [28, 86], [12, 87], [22, 81], [20, 86], [14, 70], [18, 82], [12, 73], [29, 70], [13, 80], [105, 44]]
K1 = [215, 224, 185]
f1 = '(r^k)&((k//16)|r)'

print ord_to_str(de_feistel(C1, K1, f1))

# UZD2
C2 = [[5, 86], [69, 15], [71, 75], [18, 5], [30, 64], [80, 17], [95, 72], [22, 17], [9, 81], [81, 6], [90, 71], [7, 14], [7, 81], [68, 27], [65, 72], [4, 6], [27, 64], [95, 3], [84, 83], [3, 23], [31, 68], [68, 9], [65, 67], [4, 8], [11, 76], [64, 31], [89, 67], [11, 12], [7, 85], [77, 30], [86, 74], [2, 5], [0, 78], [71, 22], [75, 65], [1, 15], [20, 68], [91, 12], [87, 77], [1, 22], [21, 71], [79, 6], [86, 88], [24, 15]]
IV2 = [7, 14]
K2 = [215, 224, 185]
f2 = '(r^k)&((k//16)|r)'

M2 = [[]]

for i in range(len(C2)):
    ci = C2[i]
    cid = de_feistel([ci], K2, f2)[0]
    mi = xor(cid, IV2)
    IV2 = ci
    M2.append(mi)
    
print ord_to_str(M2)

# UZD3
C3 = [[87, 65], [78, 19], [24, 94], [22, 26], [81, 68], [88, 29], [16, 76], [24, 20], [78, 76], [81, 24], [24, 87], [27, 11], [83, 73], [81, 24], [5, 79], [19, 18], [72, 80], [70, 18], [12, 88], [27, 16], [76, 92], [76, 12], [1, 95], [15, 5], [71, 88], [84, 8], [21, 84], [14, 16], [91, 82], [94, 31], [27, 64], [21, 25], [95, 83], [74, 26], [10, 79], [15, 30], [83, 87], [77, 20], [12, 75], [11, 0], [64, 64], [66, 12], [4, 82], [10, 17], [65, 91], [84, 31], [28, 80], [18, 0], [92, 83], [72, 10], [10, 93], [18, 30], [77, 76], [80, 7], [20, 66], [26, 7], [77, 84], [65, 23], [29, 83], [9, 1], [73, 69], [92, 28], [26, 71], [31, 14]]
IV3 = [7, 14]
K3 = [215, 224, 185]
f3 = '(r^k)&((k//16)|r)'

M3 = [[]]

for i in range(len(C3)):
    ci = C3[i]
    IV3s = feistel([IV3], K3, f3)[0]
    mi = xor(ci, IV3s)
    IV3 = ci
    M3.append(mi)
    
print ord_to_str(M3)

# UZD4
C4 = [[69, 83], [70, 68], [64, 73], [76, 84], [94, 77], [76, 75], [73, 86], [64, 64], [80, 65], [72, 72], [87, 94], [92, 66], [83, 88], [64, 88], [75, 95], [85, 84], [66, 84], [76, 82], [77, 73], [68, 82], [91, 77], [95, 92], [70, 77], [70, 79], [75, 65], [87, 89], [69, 91], [76, 77], [65, 94], [68, 74], [82, 77], [91, 68], [77, 117], [94, 104], [77, 115], [89, 96], [67, 101], [90, 108], [67, 109], [89, 100], [80, 108], [64, 107], [65, 123], [80, 9]]
K4 = [215, 224, 185]
f4 = '(r^k)&((k//16)|r)'
# m = block_no, k = first key
f_counter = '(m^k)&((k//16)|m)'

M4 = [[]]

def create_counter(m,k):
    T = eval(f_counter)
    return [T,T]

for i in range(len(C4)):
    ci = C4[i]
    Ti = create_counter(i, K4[0])
    Tis = feistel([Ti], K4, f4)[0]
    mi = xor(ci, Tis)
    M4.append(mi)
    
print ord_to_str(M4)